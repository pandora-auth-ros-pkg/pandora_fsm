#!/usr/bin/env python

PACKAGE='pandora_fsm'

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, \
    int_t, double_t

gen = ParameterGenerator()
gen.add("arenaVictims", int_t, 0, "The number of victims on yellow arena", 4, 3, 4)
gen.add("maxQRs", int_t, 0, "Number of qrs in the yellow arena", 20, 10, 20)
gen.add("yellowArenaArea", int_t, 0, "Yellow arena area", 18, 10, 30)
gen.add("yellowBlackArenaArea", int_t, 0, "Yellow-Black arena area", 12, 5, 20)
gen.add("maxTime", int_t, 0, "Time for a robocup mission", 1200, 900, 1800)
gen.add("timePassed", int_t, 0, "Time passed since the beginning of the mission", 0, 0, 1800)
gen.add("validVictimProbability", double_t, 0, "Above this probability, the victim is considered as valid", 0.5, 0, 1)
gen.add("abortedVictimsDistance", double_t, 0, "Distance between 2 aborted victims", 0.5, 0, 1)
gen.add("updatedVictimThreshold", double_t, 0, "Above this threshold the victim gets updated", 0.05, 0, 1)
gen.add("abortedVictimSensorHold", double_t, 0, "Above this threshold robot goes to SENSOR_HOLD state even if the victim is aborted", 0.6, 0, 1)
gen.add("robotResets", double_t, 0, "Number of resets", 0, 0, 10)
gen.add("robotRestarts", double_t, 0, "Number of restarts", 0, 0, 20)
gen.add("explorationStrategy", int_t, 0, "Exploration strategy to be used", 4, 0, 5)
gen.add("arenaType", int_t, 0, "Choose between yellow, yellow-black and mapping mission", 0, 0, 2)
gen.add("strategy3DeepLimit", double_t, 0, "Deep-Normal limit for exploration strategy 3", 0.85, 0, 1.5)
gen.add("strategy4DeepLimit", double_t, 0, "Deep-Normal limit for exploration strategy 4", 0, -0.5, 0.5)
gen.add("strategy4FastLimit", double_t, 0, "Normal-Fast limit for exploration strategy 4", 0.1, -0.2, 0.8)
gen.add("strategy5DeepLimit", double_t, 0, "Deep-Normal limit for exploration strategy 5", 0.85, 0, 1.5)
exit(gen.generate(PACKAGE, "pandora_fsm", "FSMParams"))
