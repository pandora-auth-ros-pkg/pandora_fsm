#!/usr/bin/env python

PACKAGE = 'pandora_fsm'

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator
from dynamic_reconfigure.parameter_generator_catkin import int_t
from dynamic_reconfigure.parameter_generator_catkin import str_t
from dynamic_reconfigure.parameter_generator_catkin import bool_t
from dynamic_reconfigure.parameter_generator_catkin import double_t

gen = ParameterGenerator()

"""
"""

gen.add("arena_victims", int_t, 0,
        "The number of victims on yellow arena", 4, 3, 4)
gen.add("arena_QRs", int_t, 0, "Number of QRs in the yellow arena", 20, 10, 20)
gen.add("yellow_area", int_t, 0, "Yellow arena area", 18, 10, 30)
gen.add("yellow_black_area", int_t, 0, "Yellow-Black arena area", 12, 5, 20)
gen.add("max_time", int_t, 0, "Time for a robocup mission", 1200, 900, 1800)
gen.add("time_passed", int_t, 0,
        "Time passed since the beginning of the mission", 0, 0, 1800)
gen.add("valid_victim_probability", double_t, 0,
        "Above this probability, the victim is considered valid", 0.5, 0, 1)
gen.add("aborted_victims_distance", double_t, 0,
        "Distance between 2 aborted victims", 0.5, 0, 1)
gen.add("updated_victim_threshold", double_t, 0,
        "Above this threshold the victim gets updated", 0.05, 0, 1)
gen.add("aborted_victim_sensor_hold", double_t, 0,
        "Above this threshold robot goes to SENSOR_HOLD state even if the \
         victim is aborted", 0.6, 0, 1)
gen.add("robot_resets", int_t, 0, "Number of resets", 0, 0, 10)
gen.add("robot_restarts", int_t, 0, "Number of restarts", 0, 0, 20)
gen.add("exploration_strategy", str_t, 0,
        "Exploration strategy to be used", "normal")
gen.add("arena_type", str_t, 0, "Type of the arena", "yellow")
gen.add("reload_fsm", bool_t, 0,
        "If True the FSM will be reloaded with the new strategy", False)
gen.add("goto_state", str_t, 0,
        "Sends the agent to a state of the current strategy", 'no_state')

exit(gen.generate(PACKAGE, "pandora_fsm", "FSMParams"))
